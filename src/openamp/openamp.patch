diff -uparN open-amp-2016.10/lib/common/hil.c openamp/lib/common/hil.c
--- open-amp-2016.10/lib/common/hil.c	2016-11-05 00:18:46.000000000 +0800
+++ openamp/lib/common/hil.c	2017-02-24 14:39:34.000000000 +0800
@@ -1,6 +1,7 @@
 /*
  * Copyright (c) 2014, Mentor Graphics Corporation
  * All rights reserved.
+ * Copyright (c) 2016 Wind River System, Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -52,7 +53,7 @@
 #include <metal/utilities.h>
 #include <metal/time.h>
 
-#define DEFAULT_VRING_MEM_SIZE 0x10000
+#define DEFAULT_VRING_MEM_SIZE 0x8000
 
 /*--------------------------- Globals ---------------------------------- */
 static METAL_DECLARE_LIST (procs);
diff -uparN open-amp-2016.10/lib/common/Makefile openamp/lib/common/Makefile
--- open-amp-2016.10/lib/common/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/common/Makefile	2017-02-24 14:39:34.000000000 +0800
@@ -0,0 +1,50 @@
+# Makefile - makefile for OpenAMP common
+#
+# Copyright (c) 2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+# 10nov16,ghl  Create for OpenAMP on vxworks-7 (F8373).
+#
+# DESCRIPTION
+# This file contains the makefile rules for building OpenAMP library.
+#
+
+LIB_BASE_NAME = OPENAMP
+
+include $(WIND_KRNL_MK)/defs.library.mk
+
+OBJS_ARMARCH7M = firmware.o hil.o sh_mem.o
+OBJS_ARMARCH7  = firmware.o hil.o sh_mem.o
+DOC_FILES      = firmware.c hil.c sh_mem.c
+
+include $(wildcard $(sort *.mk))
+
+OBJS=$(OBJS_$(CPU))
+
+include $(WIND_KRNL_MK)/rules.library.mk
diff -uparN open-amp-2016.10/lib/include/openamp/compiler.h openamp/lib/include/openamp/compiler.h
--- open-amp-2016.10/lib/include/openamp/compiler.h	2016-11-05 00:18:46.000000000 +0800
+++ openamp/lib/include/openamp/compiler.h	2017-02-24 14:39:34.000000000 +0800
@@ -5,6 +5,7 @@
  * Copyright (c) 2014, Mentor Graphics Corporation
  * All rights reserved.
  * Copyright (c) 2016 Freescale Semiconductor, Inc. All rights reserved.
+ * Copyright (c) 2016 Wind River System, Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -75,6 +76,17 @@
 #define OPENAMP_PACKED_END _Pragma("pack()")
 #endif
 
+/* DIAB build tools */
+#elif defined(__DCC__)
+
+#ifndef OPENAMP_PACKED_BEGIN
+#define OPENAMP_PACKED_BEGIN
+#endif
+
+#ifndef OPENAMP_PACKED_END
+#define OPENAMP_PACKED_END __attribute__((__packed__))
+#endif
+
 #else
 /* There is no default definition here to avoid wrong structures packing in case of not supported compiler */
 #error Please implement the structure packing macros for your compiler here!
diff -uparN open-amp-2016.10/lib/include/openamp/open_amp_vx.h openamp/lib/include/openamp/open_amp_vx.h
--- open-amp-2016.10/lib/include/openamp/open_amp_vx.h	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/include/openamp/open_amp_vx.h	2017-02-24 14:39:34.000000000 +0800
@@ -0,0 +1,68 @@
+/* 
+* Copyright (c) 2016 Wind River Systems, Inc. 
+* 
+* Redistribution and use in source and binary forms, with or without modification, are 
+* permitted provided that the following conditions are met: 
+* 
+* 1) Redistributions of source code must retain the above copyright notice, 
+* this list of conditions and the following disclaimer. 
+* 
+* 2) Redistributions in binary form must reproduce the above copyright notice, 
+* this list of conditions and the following disclaimer in the documentation and/or 
+* other materials provided with the distribution. 
+* 
+* 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+* used to endorse or promote products derived from this software without specific 
+* prior written permission. 
+* 
+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+*/
+ 
+/*
+modification history
+--------------------
+03may16,mw1  create for OpenAMP (F5252)
+*/
+
+#ifndef OPEN_AMP_DBG_H_
+#define OPEN_AMP_DBG_H_
+
+#include <vxWorks.h>
+#include <taskLib.h>
+#include <private/kwriteLibP.h>     /* _func_kprintf */
+
+
+#define OPEN_AMP_DBG
+#ifdef  OPEN_AMP_DBG
+
+static int openampDbgLvl = 0;
+extern char *openampRole;
+
+#undef OPEN_AMP_DBG
+#define OPEN_AMP_DBG(lvl,fmt,args...)                       \
+        if ((openampDbgLvl >= lvl) && (_func_kprintf != NULL))      \
+            _func_kprintf("%s-[%s]%s(%d): " fmt, openampRole,       \
+            taskName(taskIdSelf()), __FUNCTION__, __LINE__, ##args)
+
+#else
+#undef OPEN_AMP_DBG
+#define OPEN_AMP_DBG(lvl,fmt,...)
+#endif  /* OPEN_AMP_DBG */
+
+#undef OPEN_AMP_MSG
+#define OPEN_AMP_MSG(fmt,args...)       \
+        if (_func_kprintf != NULL)      \
+            _func_kprintf("%s-[%s]%s(%d): " fmt, openampRole, \
+            taskName(taskIdSelf()), __FUNCTION__, __LINE__, ##args)
+
+#endif /* OPEN_AMP_DBG_H_ */
+
diff -uparN open-amp-2016.10/lib/Makefile openamp/lib/Makefile
--- open-amp-2016.10/lib/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/Makefile	2017-02-24 14:39:34.000000000 +0800
@@ -0,0 +1,48 @@
+# Makefile - makefile for OpenAMP library on vxworks-7
+#
+# Copyright (c) 2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+# 10nov16,ghl  Create for OpenAMP on vxworks-7 (F8373).
+#
+# DESCRIPTION
+# This file contains the makefile rules for building OpenAMP library.
+#
+
+LIB_BASE_NAME = OPENAMP
+
+
+BUILD_DIRS = common
+BUILD_DIRS += remoteproc
+BUILD_DIRS += rpmsg
+BUILD_DIRS += virtio
+BUILD_DIRS += proxy
+
+include $(WIND_KRNL_MK)/rules.library.mk
+
diff -uparN open-amp-2016.10/lib/proxy/Makefile openamp/lib/proxy/Makefile
--- open-amp-2016.10/lib/proxy/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/proxy/Makefile	2017-02-24 14:39:34.000000000 +0800
@@ -0,0 +1,50 @@
+# Makefile - makefile for OpenAMP proxy
+#
+# Copyright (c) 2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+# 10nov16,ghl  Create for OpenAMP on vxworks-7 (F8373).
+#
+# DESCRIPTION
+# This file contains the makefile rules for building OpenAMP library.
+#
+
+LIB_BASE_NAME = OPENAMP
+
+include $(WIND_KRNL_MK)/defs.library.mk
+
+OBJS_ARMARCH7M = rpmsg_retarget.o
+OBJS_ARMARCH7  = rpmsg_retarget.o
+DOC_FILES      = 
+
+include $(wildcard $(sort *.mk))
+
+OBJS=$(OBJS_$(CPU))
+
+include $(WIND_KRNL_MK)/rules.library.mk
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/imx6sx/helper.c openamp/lib/remoteproc/drivers/imx6sx/helper.c
--- open-amp-2016.10/lib/remoteproc/drivers/imx6sx/helper.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/imx6sx/helper.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,115 @@
+
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ *
+ * Copyright (c) 2015 Xilinx, Inc. All rights reserved.
+ * Copyright (c) 2016 Wind River System, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the <ORGANIZATION> nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+#include <vxWorks.h>
+#include <pmapLib.h>
+
+#include <string.h>
+#include <stdio.h>
+#include "metal/sys.h"
+#include "metal/shmem.h"
+#include "metal/device.h"
+#include "metal/io.h"
+#include "openamp/firmware.h"
+
+extern struct metal_generic_shmem metal_shm_table[];
+extern int metal_shm_table_size;
+
+extern struct firmware_info fw_table[];
+extern int fw_table_size;
+
+extern void *metal_machine_io_mem_map(metal_phys_addr_t pa,
+				      size_t size, unsigned int flags);
+extern int metal_init_fw_info(struct firmware_info * fw_info);
+
+void cleanup_system()
+{
+    int i;
+    struct firmware_info *fw_info;
+
+    for (i = 0; i < fw_table_size; i++)
+    {
+        fw_info = &fw_table[i];
+        if (fw_info->start_addr)
+        {
+            free((void *)fw_info->start_addr);
+            fw_info->start_addr = 0;
+        }
+    }
+
+    metal_finish();
+}
+
+int init_system()
+{
+    struct metal_init_params metal_param = METAL_INIT_DEFAULTS;
+    struct metal_generic_shmem *sh_mem;
+    struct firmware_info *fw_info;
+    int i;
+    
+    metal_param.log_level = LOG_DEBUG;
+    metal_init(&metal_param);
+
+    for (i = 0; i < metal_shm_table_size; i++)
+    {
+        sh_mem = &metal_shm_table[i];
+        sh_mem->io.virt = metal_machine_io_mem_map(sh_mem->io.physmap[0], 
+                                 sh_mem->io.size, sh_mem->io.mem_flags);
+        if (sh_mem->io.virt == PMAP_FAILED)
+        {
+            goto error_out;
+        }
+        
+        metal_shmem_register_generic(sh_mem);
+    }
+
+    for (i = 0; i < fw_table_size; i++)
+    {
+        fw_info = &fw_table[i];
+        if (strncmp(fw_info->name, "", sizeof(fw_info->name)) == 0)
+        {
+            continue;
+        }
+        
+        if (metal_init_fw_info(fw_info) != 0)
+        {
+            goto error_out;
+        }
+    }
+    return 0;
+
+error_out:
+    cleanup_system();
+    
+    return -1;
+}
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/imx6sx/imx6sx_ca9.c openamp/lib/remoteproc/drivers/imx6sx/imx6sx_ca9.c
--- open-amp-2016.10/lib/remoteproc/drivers/imx6sx/imx6sx_ca9.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/imx6sx/imx6sx_ca9.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,299 @@
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ * Copyright (c) 2016 Wind River Systems, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of Mentor Graphics Corporation nor the names of its
+ *    contributors may be used to endorse or promote products derived from this
+ *    software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**************************************************************************
+ * FILE NAME
+ *
+ *       imx6sx_ca9.c
+ *
+ * DESCRIPTION
+ *
+ *       This file is the Implementation of IPC hardware layer interface
+ *       for Freescale iMX6 SoloX platform.
+ *
+ **************************************************************************/
+
+#include <vxWorks.h>
+#include <pmapLib.h>
+#include <vmLibCommon.h>
+#include <vxAtomicLib.h>
+#include "openamp/hil.h"
+#include "openamp/elf_loader.h"
+#include "metal/alloc.h"
+#include "metal/irq.h"
+#include "metal/atomic.h"
+#include "metal/sys.h"
+#include "openamp/open_amp_vx.h"
+
+char * openampRole = "master";
+
+#define TEMP_SP_BASE         (0x008f8000)
+#define CM4_VECTOR_BASE_PHYS (0x007f8000)
+#define CM4_VECTOR_SIZE      (0x4000)
+#define CM4_SRC_ENABLE       (0xa0480529)
+#define CM4_SRC_BASE_PHYS    (0x020d8000)
+#define CM4_SRC_SIZE         (0x4000)
+#define CM4_DDR_ALIAS_BASE   (0x10000000)
+#define CM4_DDR_ALIAS_SIZE   (0x10000000 - 0x10000)
+
+#define _rproc_wait() taskDelay(0)
+
+
+/*--------------------------- Declare Functions ------------------------ */
+static int _enable_interrupt(struct proc_vring *vring_hw);
+static void _notify(struct hil_proc *proc, struct proc_intr *intr_info);
+static int _boot_cpu(struct hil_proc *proc, unsigned int load_addr);
+static void _shutdown_cpu(struct hil_proc *proc);
+static int _poll(struct hil_proc *proc, int nonblock);
+static int _initialize(struct hil_proc *proc);
+static void _release(struct hil_proc *proc);
+
+static int platform_isr(int vect_id, void *data);
+static int boot_remote_cpu(UINT32 entry, UINT32 cpu);
+
+/*--------------------------- Globals ---------------------------------- */
+struct hil_platform_ops imx6sx_ca9_proc_ops = {
+    .enable_interrupt   = _enable_interrupt,
+    .notify             = _notify,
+    .boot_cpu           = _boot_cpu,
+    .shutdown_cpu       = _shutdown_cpu,
+    .poll               = _poll,
+    .initialize         = _initialize,
+    .release            = _release,
+};
+
+static int _enable_interrupt(struct proc_vring *vring_hw)
+{
+    OPEN_AMP_DBG(2, "vect_id=%d,vring_hw=%p\n", 
+                    vring_hw->intr_info.vect_id,
+                    vring_hw);
+    
+    /* Register ISR */
+    metal_irq_register(vring_hw->intr_info.vect_id, platform_isr,
+				vring_hw->intr_info.dev, vring_hw);
+
+    /* Enable the interrupts */
+    metal_irq_enable(vring_hw->intr_info.vect_id);
+
+    return 0;
+}
+
+static void _notify(struct hil_proc *proc, struct proc_intr *intr_info)
+{
+    OPEN_AMP_DBG(2, "cpu_id=%d,intr_info=%p\n", proc->cpu_id, intr_info);
+    if (vx_openamp_ipi_notify)
+        vx_openamp_ipi_notify(intr_info->vect_id);
+}
+
+static int _boot_cpu(struct hil_proc *proc, unsigned int load_addr)
+{
+    OPEN_AMP_DBG(2, "cpu_id=%d,load_addr=0x%x\n", proc->cpu_id, load_addr);
+    boot_remote_cpu(load_addr, proc->cpu_id);
+    return 0;
+}
+
+static void _shutdown_cpu(struct hil_proc *proc)
+{
+    OPEN_AMP_DBG(2,"cpu_id=%d\n", proc->cpu_id);
+    /* tmp: do nothing here */
+}
+
+static int platform_isr(int vect_id, void *data)
+{
+    struct proc_vring *vring_hw = (struct proc_vring *)(data);
+    struct proc_intr *intr_info;
+    
+    (void) vect_id;
+    
+    intr_info = &(vring_hw->intr_info);
+    atomic_flag_clear((atomic_uint *)&(intr_info->data));
+    
+    OPEN_AMP_DBG(2, "vector=%d,data=%p\n", vect_id, data);
+    
+    return 0;
+}
+
+static int _poll(struct hil_proc *proc, int nonblock)
+{
+    struct proc_vring *vring;
+    struct proc_intr *intr_info;
+    int i = 0;
+    int kicked = 0;
+    
+    while(1) {
+        vring = &proc->vdev.vring_info[i];
+        intr_info = &(vring->intr_info);
+        if (!(atomic_flag_test_and_set(
+            (atomic_uint *)&(intr_info->data)))) {
+            virtqueue_notification(vring->vq);
+            kicked = 1;
+            if (i)
+                return 0;
+            i++;
+        } else if (!i) {
+            i++;
+        } else {
+            if (kicked) {
+                return 0;
+            } else if (nonblock) {
+                return -EAGAIN;
+            } else {
+                _rproc_wait();
+                i--;
+                continue;
+            }
+        }
+    }
+}
+
+
+static int _initialize(struct hil_proc *proc)
+{
+    int i;
+    struct proc_intr *intr_info;
+
+    for (i = 0; i < 2; i++) {
+        intr_info = &(proc->vdev.vring_info[i].intr_info);
+        atomic_store((atomic_uint *)&(intr_info->data), 1);
+    }
+
+	return 0;
+}
+
+static void _release(struct hil_proc *proc)
+{
+    (void)proc;
+    return;
+}
+
+
+static int boot_remote_cpu
+    (
+    UINT32 entry,   /* Entry point */
+    UINT32 cpu	    /* CPU number */ 
+    )
+{
+    STATUS stat = OK;
+         
+    /* setup reset vector, memmap vector table of CM4*/
+    UINT32 *cm4_base = (UINT32 *)pmapGlobalMap(CM4_VECTOR_BASE_PHYS, 
+                                               CM4_VECTOR_SIZE, 
+                                               (MMU_ATTR_CACHE_OFF|
+                                               MMU_ATTR_PROT_MSK));
+    if ((void*)cm4_base == PMAP_FAILED){
+        OPEN_AMP_DBG(2, "Failed to map 0x%08x, 0x%08x\n", 
+                        CM4_VECTOR_BASE_PHYS, CM4_VECTOR_SIZE);
+        return (ERROR);
+    }
+     
+    OPEN_AMP_DBG(2,"cpu=%d,entry=0x%x, cmbase=%p\n", cpu,entry, cm4_base);
+    VX_INSTR_BARRIER();
+    cm4_base[0] = TEMP_SP_BASE;
+    /* sync */
+    VX_INSTR_BARRIER();
+    cm4_base[1] = entry|0x1;
+    VX_INSTR_BARRIER();
+         
+    stat = pmapGlobalUnmap(cm4_base, CM4_VECTOR_SIZE);
+    if (stat != OK)
+    {
+        OPEN_AMP_DBG(2, "Failed to unmap 0x%08x, 0x%08x\n", 
+                        cm4_base, CM4_VECTOR_SIZE);
+        return (ERROR);
+    }
+     
+    /* enable clock of CM4 */
+    cm4_base = (UINT32 *)pmapGlobalMap(CM4_SRC_BASE_PHYS, 
+                                       CM4_SRC_SIZE, 
+                                       (MMU_ATTR_CACHE_OFF|MMU_ATTR_PROT_MSK));
+    if ((void*)cm4_base == PMAP_FAILED)
+    {
+        OPEN_AMP_DBG(2, "Failed to map 0x%08x, 0x%08x\n", 
+                        CM4_SRC_BASE_PHYS, CM4_SRC_SIZE);
+        return (ERROR);
+    }
+     
+    VX_INSTR_BARRIER();
+    cm4_base[0] = CM4_SRC_ENABLE;
+    /* sync */
+    VX_INSTR_BARRIER();
+         
+    stat = pmapGlobalUnmap(cm4_base, CM4_SRC_SIZE);
+    if (stat != OK)
+    {
+        OPEN_AMP_DBG(2, "Failed to unmap 0x%08x, 0x%08x\n", 
+                        cm4_base, CM4_SRC_SIZE);
+        return (ERROR);
+    }
+         
+    return (OK);
+}
+
+int metal_machine_load_remote(void *fw, void *destination,
+				    Elf32_Off offset, Elf32_Word size)
+{
+    void *vaddr;
+    char *src = (char *)fw;
+    UINT32 paddr = (UINT32)destination;
+
+    /* DDR code alias of CM4@:0x10000000 => DDR address of CA9@:0x80000000 */
+    if ((paddr >= CM4_DDR_ALIAS_BASE) && 
+            (paddr <= (CM4_DDR_ALIAS_BASE+CM4_DDR_ALIAS_SIZE)))
+    {
+        paddr += 0x70000000;
+    }
+    
+    vaddr = pmapGlobalMap(paddr, size, 
+                           (MMU_ATTR_CACHE_WRITETHRU |
+                            MMU_ATTR_CACHE_COHERENCY | 
+                            MMU_ATTR_PROT_MSK));
+    if (vaddr == PMAP_FAILED)
+    {
+        return -1;
+    }
+    
+    /* Seek to the specified offset. */
+    src = src + offset;
+
+    /* Read the data. */
+    memcpy((char *)vaddr, src, size);
+    
+    pmapGlobalUnmap(vaddr, size);
+    
+    return 0;
+}
+
+void *metal_machine_io_mem_map(unsigned int pa, unsigned int size, 
+                                        unsigned int flags)
+{
+    (void)flags;
+    return pmapGlobalMap(pa, size, (MMU_ATTR_CACHE_OFF|MMU_ATTR_PROT_MSK));
+}
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/imx6sx/imx6sx_ca9_info.c openamp/lib/remoteproc/drivers/imx6sx/imx6sx_ca9_info.c
--- open-amp-2016.10/lib/remoteproc/drivers/imx6sx/imx6sx_ca9_info.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/imx6sx/imx6sx_ca9_info.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,145 @@
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ * Copyright (c) 2016 Wind River Systems, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of Mentor Graphics Corporation nor the names of its
+ *    contributors may be used to endorse or promote products derived from this
+ *    software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**************************************************************************
+ * FILE NAME
+ *
+ *       imx6sx_ca9_info.c
+ *
+ * DESCRIPTION
+ *
+ *       This file implements APIs to get platform specific
+ *       information for OpenAMP. 
+ *
+ **************************************************************************/
+
+#include "openamp/hil.h"
+#include "metal/sys.h"
+#include "metal/shmem.h"
+#include "metal/device.h"
+#include "metal/io.h"
+
+/* Reference implementation that show cases platform_get_cpu_info and 
+ platform_get_for_firmware API implementation for Bare metal environment */
+
+extern struct hil_platform_ops imx6sx_ca9_proc_ops;
+
+/* IPC Device parameters */
+#define SHM_ADDR                          (void *)(0x00900000)
+#define SHM_SIZE                          (0x20000 - 0x8000)
+
+#define VRING0_IPI_VECT                   0
+#define VRING1_IPI_VECT                   1
+#define VRING2_IPI_VECT                   2
+#define VRING3_IPI_VECT                   3
+#define MASTER_CPU_ID                     0
+#define REMOTE_CPU_ID                     1
+#define RPMSG_CHAN_NAME                   "rpmsg-openamp-demo-channel"
+
+#define BUS_NAME               "generic"
+#define SHM_DEV_NAME           "00900000.shm"
+#define VRING_DEV_NAME         "00918000.vring"
+
+const metal_phys_addr_t metal_imx6sx_phys[] = {
+	0x00900000, /**< shared memory base address */
+	0x00918000, /**< base vring address */
+};
+
+#define SHM_DEV_NAME           "00900000.shm"
+#define VRING_DEV_NAME         "00918000.vring"
+
+struct metal_generic_shmem metal_shm_table[] = {
+    {
+        /* Shared memory management device */
+        SHM_DEV_NAME,
+        {
+            (void *)-1,
+            &metal_imx6sx_phys[0],
+            0x18000,
+            (sizeof(metal_phys_addr_t) << 3),
+            (unsigned long)(-1),
+            METAL_UNCACHED | METAL_SHARED_MEM,
+            {NULL},
+        },
+        {NULL},
+    },
+    {
+        /* vring device */
+        VRING_DEV_NAME,
+        {
+            (void *)-1,
+            &metal_imx6sx_phys[1],  /* from RING_TX and RING_RX in rsc_table.c */
+            0x8000,
+            (sizeof(metal_phys_addr_t) << 3),
+            (unsigned long)(-1),
+            METAL_UNCACHED | METAL_SHARED_MEM,
+            {NULL},
+        },
+        {NULL},
+    },
+};
+
+const int metal_shm_table_size = sizeof(metal_shm_table)/sizeof(struct metal_generic_shmem);
+    
+struct firmware_info fw_table[] =
+{
+    {"/romfs/vxWorks_romResident",
+     0,
+     0}
+};
+
+const int fw_table_size = sizeof(fw_table)/sizeof(struct firmware_info);
+
+struct hil_proc *platform_create_proc(int proc_index)
+{
+    struct hil_proc *proc;
+
+    (void)proc_index;
+    proc = hil_create_proc(&imx6sx_ca9_proc_ops, MASTER_CPU_ID, NULL);
+    if (!proc)
+        return NULL;
+
+    /* Setup IPI info */
+    hil_set_ipi(proc, 0, VRING0_IPI_VECT, NULL);
+    hil_set_ipi(proc, 1, VRING1_IPI_VECT, NULL);
+
+    hil_set_vring(proc, 0, NULL, VRING_DEV_NAME);
+    hil_set_vring(proc, 1, NULL, VRING_DEV_NAME);
+
+    /* Setup shared memory info */
+    hil_set_shm(proc, NULL, SHM_DEV_NAME, 0, SHM_SIZE);
+
+    /* Setup RPMSG channel info */
+    hil_set_rpmsg_channel(proc, 0, RPMSG_CHAN_NAME);
+
+    return proc;
+}
+
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/imx6sx/imx6sx_cm4.c openamp/lib/remoteproc/drivers/imx6sx/imx6sx_cm4.c
--- open-amp-2016.10/lib/remoteproc/drivers/imx6sx/imx6sx_cm4.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/imx6sx/imx6sx_cm4.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,199 @@
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ * Copyright (c) 2015-2016 Wind River Systems, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of Mentor Graphics Corporation nor the names of its
+ *    contributors may be used to endorse or promote products derived from this
+ *    software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**************************************************************************
+ * FILE NAME
+ *
+ *       imx6sx_cm4.c
+ *
+ * DESCRIPTION
+ *
+ *       This file is the Implementation of IPC hardware layer interface
+ *       for Freescale iMX6 SoloX platform.
+ *
+ **************************************************************************/
+
+#include <vxWorks.h>
+#include "metal/mutex.h"
+#include "metal/irq.h"
+#include "metal/atomic.h"
+#include "metal/sys.h"
+#include "openamp/hil.h"
+#include "openamp/elf_loader.h"
+#include "openamp/open_amp_vx.h"
+
+char * openampRole = "remote";
+
+#define _rproc_wait() taskDelay(0)
+
+/*--------------------------- Declare Functions ------------------------ */
+static int _enable_interrupt(struct proc_vring *vring_hw);
+static void _notify(struct hil_proc *proc, struct proc_intr *intr_info);
+static int _boot_cpu(struct hil_proc *proc, unsigned int load_addr);
+static void _shutdown_cpu(struct hil_proc *proc);
+static int _poll(struct hil_proc *proc, int nonblock);
+static int _initialize(struct hil_proc *proc);
+static void _release(struct hil_proc *proc);
+
+static int platform_isr(int vect_id, void *data);
+
+/*--------------------------- Globals ---------------------------------- */
+struct hil_platform_ops imx6sx_cm4_proc_ops = {
+    .enable_interrupt   = _enable_interrupt,
+    .notify             = _notify,
+    .boot_cpu           = _boot_cpu,
+    .shutdown_cpu       = _shutdown_cpu,
+    .poll               = _poll,
+    .initialize         = _initialize,
+    .release            = _release,
+};
+
+static int _enable_interrupt(struct proc_vring *vring_hw)
+{
+    /* Register ISR*/
+    metal_irq_register(vring_hw->intr_info.vect_id, platform_isr,
+				vring_hw->intr_info.dev, vring_hw);
+
+    /* Enable the interrupts */
+    metal_irq_enable(vring_hw->intr_info.vect_id);
+    return 0;
+}
+
+static void _notify(struct hil_proc *proc, struct proc_intr *intr_info)
+{
+    OPEN_AMP_DBG(2,"cpu_id=%d,intr_info=%p\n",proc->cpu_id,intr_info);
+    if (vx_openamp_ipi_notify)
+        vx_openamp_ipi_notify(intr_info->vect_id);
+}
+
+static int _boot_cpu(struct hil_proc *proc, unsigned int load_addr)
+{
+    OPEN_AMP_DBG(2,"cpu_id=%d,load_addr=%d\n",proc->cpu_id,load_addr);
+    return 0;
+}
+
+static void _shutdown_cpu(struct hil_proc *proc)
+{
+    OPEN_AMP_DBG(2,"cpu_id=%d\n",proc->cpu_id);
+}
+
+static int _poll(struct hil_proc * proc,int nonblock)
+{
+    struct proc_vring *vring;
+    struct proc_intr *intr_info;
+    int i = 0;
+    int kicked = 0;
+
+    while(1) {
+        vring = &proc->vdev.vring_info[i];
+        intr_info = &(vring->intr_info);
+        if (!(atomic_flag_test_and_set(
+            (atomic_uint *)&(intr_info->data)))) {
+            virtqueue_notification(vring->vq);
+            kicked = 1;
+            if (i)
+                return 0;
+            i++;
+        } else if (!i) {
+            i++;
+        } else {
+            if (kicked) {
+                return 0;
+            } else if (nonblock) {
+                return -EAGAIN;
+            } else {
+                _rproc_wait();
+                i--;
+                continue;
+            }
+        }
+    }
+}
+
+static int _initialize(struct hil_proc * proc)
+{
+    int i;
+    struct proc_intr *intr_info;
+
+    for (i = 0; i < 2; i++) {
+        intr_info = &(proc->vdev.vring_info[i].intr_info);
+        atomic_store((atomic_uint *)&(intr_info->data), 1);
+    }
+    return 0;
+}
+
+
+static void _release(struct hil_proc * proc)
+{
+    (void)proc;
+    return;
+}
+
+
+static int platform_isr(int vect_id, void *data)
+{
+    struct proc_vring *vring_hw = (struct proc_vring *)(data);
+    struct proc_intr *intr_info;
+
+    (void) vect_id;
+    
+    intr_info = &(vring_hw->intr_info);
+    atomic_flag_clear((atomic_uint *)&(intr_info->data));
+
+    OPEN_AMP_DBG(2, "vector=%d,data=%p\n", vect_id, data);
+
+    return 0;
+}
+
+int metal_machine_load_remote(void *src, void *destination,
+				                Elf32_Off offset, Elf32_Word size)
+{
+    /* nothing to do on slave dev */
+    return 0;
+}
+
+
+#define DDR_CODE_ALIAS_PHYS (0x80000000)
+#define DDR_CODE_ALIAS_BASE (0x10000000)
+#define DDR_CODE_ALIAS_SIZE (0x10000000-0x8000)
+
+void *metal_machine_io_mem_map(unsigned int pa, unsigned int size, 
+                                         unsigned int flags)
+{
+    (void)flags;
+    if ((pa >= DDR_CODE_ALIAS_PHYS) && 
+        ((pa+size)<=(DDR_CODE_ALIAS_PHYS+DDR_CODE_ALIAS_SIZE)))
+    {
+        return (void *)(pa - DDR_CODE_ALIAS_PHYS + DDR_CODE_ALIAS_BASE);
+    }
+	
+    return (void *)pa;
+}
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/imx6sx/imx6sx_cm4_info.c openamp/lib/remoteproc/drivers/imx6sx/imx6sx_cm4_info.c
--- open-amp-2016.10/lib/remoteproc/drivers/imx6sx/imx6sx_cm4_info.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/imx6sx/imx6sx_cm4_info.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,123 @@
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ * Copyright (c) 2016 Wind River Systems, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of Mentor Graphics Corporation nor the names of its
+ *    contributors may be used to endorse or promote products derived from this
+ *    software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**************************************************************************
+ * FILE NAME
+ *
+ *       imx6sx_cm4_info.c
+ *
+ * DESCRIPTION
+ *
+ *       This file implements APIs to get platform specific
+ *       information for OpenAMP. 
+ *
+ **************************************************************************/
+
+#include "openamp/hil.h"
+#include "metal/sys.h"
+#include "metal/shmem.h"
+#include "metal/device.h"
+#include "metal/io.h"
+
+/* Reference implementation that show cases platform_get_cpu_info and 
+ platform_get_for_firmware API implementation for Bare metal environment */
+
+extern struct hil_platform_ops imx6sx_cm4_proc_ops;
+
+/* IPC Device parameters */
+#define SHM_ADDR                          (void *)(0x00900000)
+#define SHM_SIZE                          (0x20000 - 0x8000)
+
+#define VRING0_IPI_VECT                   0
+#define VRING1_IPI_VECT                   1
+#define VRING2_IPI_VECT                   2
+#define VRING3_IPI_VECT                   3
+#define MASTER_CPU_ID                     0
+#define REMOTE_CPU_ID                     1
+#define RPMSG_CHAN_NAME                   "rpmsg-openamp-demo-channel"
+
+
+const metal_phys_addr_t metal_imx6sx_phys[] = {
+    0x00918000, /**< base vring address */
+};
+
+#define SHM_DEV_NAME           "00900000.shm"
+#define VRING_DEV_NAME         "00918000.vring"
+
+struct metal_generic_shmem metal_shm_table[] = {
+    {
+        VRING_DEV_NAME,
+        {
+            (void *)0x918000,       /* not need to tranfer for local mem address */
+            &metal_imx6sx_phys[0],  /* from RING_TX and RING_RX in rsc_table.c */
+            0x8000,
+            (sizeof(metal_phys_addr_t) << 3),
+            (unsigned long)(-1),
+            METAL_UNCACHED | METAL_SHARED_MEM,
+            {NULL},
+        },
+        {NULL},
+    },
+};
+
+const int metal_shm_table_size = sizeof(metal_shm_table)/sizeof(struct metal_generic_shmem);
+
+struct firmware_info fw_table[] =
+{
+    {"",
+     0,
+     0}
+};
+
+const int fw_table_size = sizeof(fw_table)/sizeof(struct firmware_info);
+
+struct hil_proc *platform_create_proc(int proc_index)
+{
+    struct hil_proc *proc;
+
+    (void)proc_index;
+    proc = hil_create_proc(&imx6sx_cm4_proc_ops, MASTER_CPU_ID, NULL);
+    if (!proc)
+        return NULL;
+
+    /* Setup IPI info */
+    hil_set_ipi(proc, 0, VRING0_IPI_VECT, NULL);
+    hil_set_ipi(proc, 1, VRING1_IPI_VECT, NULL);
+
+    hil_set_vring(proc, 0, NULL, VRING_DEV_NAME);
+    hil_set_vring(proc, 1, NULL, VRING_DEV_NAME);
+
+    /* Setup RPMSG channel info */
+    hil_set_rpmsg_channel(proc, 0, RPMSG_CHAN_NAME);
+
+    return proc;
+}
+
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/imx6sx/Makefile openamp/lib/remoteproc/drivers/imx6sx/Makefile
--- open-amp-2016.10/lib/remoteproc/drivers/imx6sx/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/imx6sx/Makefile	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,50 @@
+# Makefile - makefile for Freescale i.MX processor support library
+#
+# Copyright (c) 2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+# 15nov16,mw1  Create for OpenAMP on FSL i.MX6SX SABRE-SDB (F5252).
+#
+# DESCRIPTION
+# This file contains the makefile rules for building Freescale i.MX processor
+# support library.
+#
+
+LIB_BASE_NAME = OPENAMP
+
+include $(WIND_KRNL_MK)/defs.library.mk
+
+OBJS_ARMARCH7M = imx6sx_cm4_info.o imx6sx_cm4.o helper.o
+OBJS_ARMARCH7  = imx6sx_ca9_info.o imx6sx_ca9.o helper.o
+
+include $(wildcard $(sort *.mk))
+
+OBJS=$(OBJS_$(CPU))
+
+include $(WIND_KRNL_MK)/rules.library.mk
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/Makefile openamp/lib/remoteproc/drivers/Makefile
--- open-amp-2016.10/lib/remoteproc/drivers/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/Makefile	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,55 @@
+# Makefile - makefile for platform remoteproc driver
+#
+# Copyright (c) 2015-2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+#
+#
+# DESCRIPTION
+# This file contains the makefile rules for building platform dirver.
+#
+
+LIB_BASE_NAME = OPENAMP
+include $(WIND_KRNL_MK)/defs.library.mk
+
+ifdef	_WRS_CONFIG_FSL_IMX
+SUBDIRS = imx6sx
+endif
+ifdef	_WRS_CONFIG_TI_SITARA
+SUBDIRS = sitara
+endif
+
+OBJS_ARMARCH7M = 
+OBJS_ARMARCH7 = 
+
+include $(wildcard $(sort *.mk))
+
+OBJS=$(OBJS_$(CPU))
+
+include $(WIND_KRNL_MK)/rules.library.mk
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/sitara/helper.c openamp/lib/remoteproc/drivers/sitara/helper.c
--- open-amp-2016.10/lib/remoteproc/drivers/sitara/helper.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/sitara/helper.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,115 @@
+
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ *
+ * Copyright (c) 2015 Xilinx, Inc. All rights reserved.
+ * Copyright (c) 2017 Wind River System, Inc. All rights reserved.
+ * 
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of the <ORGANIZATION> nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <vxWorks.h>
+#include <pmapLib.h>
+#include <string.h>
+#include <stdio.h>
+#include "metal/sys.h"
+#include "metal/shmem.h"
+#include "metal/device.h"
+#include "metal/io.h"
+#include "openamp/firmware.h"
+
+extern struct metal_generic_shmem metal_shm_table[];
+extern int metal_shm_table_size;
+
+extern struct firmware_info fw_table[];
+extern int fw_table_size;
+
+extern void *metal_machine_io_mem_map(metal_phys_addr_t pa,
+				      size_t size, unsigned int flags);
+extern int metal_init_fw_info(struct firmware_info * fw_info);
+
+void cleanup_system()
+{
+    int i;
+    struct firmware_info *fw_info;
+
+    for (i = 0; i < fw_table_size; i++)
+    {
+        fw_info = &fw_table[i];
+        if (fw_info->start_addr)
+        {
+            free((void *)fw_info->start_addr);
+            fw_info->start_addr = 0;
+        }
+    }
+
+    metal_finish();
+}
+
+int init_system()
+{
+    struct metal_init_params metal_param = METAL_INIT_DEFAULTS;
+    struct metal_generic_shmem *sh_mem;
+    struct firmware_info *fw_info;
+    int i;
+    
+    metal_param.log_level = LOG_DEBUG;
+    metal_init(&metal_param);
+
+    for (i = 0; i < metal_shm_table_size; i++)
+    {
+        sh_mem = &metal_shm_table[i];
+        sh_mem->io.virt = metal_machine_io_mem_map(sh_mem->io.physmap[0], 
+                                 sh_mem->io.size, sh_mem->io.mem_flags);
+        if (sh_mem->io.virt == PMAP_FAILED)
+        {
+            goto error_out;
+        }
+        
+        metal_shmem_register_generic(sh_mem);
+    }
+
+    for (i = 0; i < fw_table_size; i++)
+    {
+        fw_info = &fw_table[i];
+        if (strncmp(fw_info->name, "", sizeof(fw_info->name)) == 0)
+        {
+            continue;
+        }
+        
+        if (metal_init_fw_info(fw_info) != 0)
+        {
+            goto error_out;
+        }
+    }
+    return 0;
+
+error_out:
+    cleanup_system();
+    
+    return -1;
+}
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/sitara/Makefile openamp/lib/remoteproc/drivers/sitara/Makefile
--- open-amp-2016.10/lib/remoteproc/drivers/sitara/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/sitara/Makefile	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,50 @@
+# Makefile - makefile for TI AM572x support library
+#
+# Copyright (c) 2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+# 16nov16,ghl  Create for OpenAMP on TI AM572x (F5252).
+#
+# DESCRIPTION
+# This file contains the makefile rules for building TI AM572x processor
+# support library.
+#
+
+LIB_BASE_NAME = OPENAMP
+
+include $(WIND_KRNL_MK)/defs.library.mk
+
+OBJS_ARMARCH7M = sitara_cm4_info.o sitara_cm4.o helper.o
+OBJS_ARMARCH7  = sitara_ca15_info.o sitara_ca15.o helper.o
+
+include $(wildcard $(sort *.mk))
+
+OBJS=$(OBJS_$(CPU))
+
+include $(WIND_KRNL_MK)/rules.library.mk
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/sitara/sitara_ca15.c openamp/lib/remoteproc/drivers/sitara/sitara_ca15.c
--- open-amp-2016.10/lib/remoteproc/drivers/sitara/sitara_ca15.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/sitara/sitara_ca15.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,605 @@
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ * Copyright (c) 2016 Wind River Systems, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of Mentor Graphics Corporation nor the names of its
+ *    contributors may be used to endorse or promote products derived from this
+ *    software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**************************************************************************
+ * FILE NAME
+ *
+ *       sitara_ca15.c
+ *
+ * DESCRIPTION
+ *
+ *       This file is the Implementation of IPC hardware layer interface
+ *       for TI Sitara AM572x platform.
+ *
+ **************************************************************************/
+
+#include <vxWorks.h>
+#include <pmapLib.h>
+#include <vmLibCommon.h>
+#include <vxAtomicLib.h>
+#include "metal/atomic.h"
+#include "metal/irq.h"
+#include "metal/sys.h"
+#include "openamp/hil.h"
+#include "openamp/elf_loader.h"
+#include "openamp/open_amp_vx.h"
+
+char * openampRole = "master";
+UINT32 ipiMboxUser = 0;   /* MPU is user 0 of mailbox1 */
+UINT32 ipiMboxTx = 0;
+UINT32 ipiMboxRx = 4;
+
+#define DBG_REG_SHOW
+
+#define CM_IPU1_BASE          0x4a005500
+#define CM_IPU1_SIZE          0x100
+#define RM_IPU1_BASE          0x4ae06500
+#define RM_IPU1_SIZE          0x100
+#define IPU1_UNICACHE_BASE    0x58880000
+#define IPU1_UNICACHE_SIZE    0x1000
+#define REG(vaddr,offset)     (*(UINT32 *)((UINT32)(vaddr)+(offset)))    
+
+#define _rproc_wait() taskDelay(0)
+
+extern void vxbMsDelay(int delayTime);
+
+/*--------------------------- Declare Functions ------------------------ */
+static int _enable_interrupt(struct proc_vring *vring_hw);
+static void _notify(struct hil_proc *proc, struct proc_intr *intr_info);
+static int _boot_cpu(struct hil_proc *proc, unsigned int load_addr);
+static void _shutdown_cpu(struct hil_proc *proc);
+static int _poll(struct hil_proc *proc, int nonblock);
+static int _initialize(struct hil_proc *proc);
+static void _release(struct hil_proc *proc);
+
+static int platform_isr(int vect_id, void *data);
+static int boot_remote_cpu(UINT32 entry, UINT32 cpu);
+
+/*--------------------------- Globals ---------------------------------- */
+struct hil_platform_ops sitara_ca15_proc_ops = {
+    .enable_interrupt	= _enable_interrupt,
+    .notify				= _notify,
+    .boot_cpu			= _boot_cpu,
+    .shutdown_cpu 		= _shutdown_cpu,
+    .poll               = _poll,
+    .initialize         = _initialize,
+    .release            = _release,
+};
+
+static int _enable_interrupt(struct proc_vring *vring_hw)
+{
+    OPEN_AMP_DBG(3, "vect_id=%d,vring_hw=%p,isr=%p\n", 
+                    vring_hw->intr_info.vect_id, vring_hw, platform_isr);
+    /* Register ISR*/
+    metal_irq_register(vring_hw->intr_info.vect_id, platform_isr,
+                    vring_hw->intr_info.dev, vring_hw);
+
+    /* Enable the interrupts */
+    metal_irq_enable(vring_hw->intr_info.vect_id);
+    return 0;
+}
+
+static void _notify(struct hil_proc *proc, struct proc_intr *intr_info)
+{
+    OPEN_AMP_DBG(3, "cpu_id=%d,intr_info=%p\n", proc->cpu_id, intr_info);
+    if (vx_openamp_ipi_notify)
+        vx_openamp_ipi_notify(intr_info->vect_id);
+}
+
+static int _boot_cpu(struct hil_proc *proc, unsigned int load_addr)
+{
+    OPEN_AMP_DBG(3, "cpu_id=%d,load_addr=0x%x\n", proc->cpu_id, load_addr);
+    boot_remote_cpu(load_addr, proc->cpu_id);
+    return 0;
+}
+
+static void _shutdown_cpu(struct hil_proc *proc)
+{
+    OPEN_AMP_DBG(3, "cpu_id=%d\n", proc->cpu_id);
+    /* temp: do nothing here */
+}
+
+static int platform_isr(int vect_id, void *data)
+{
+    struct proc_vring *vring_hw = (struct proc_vring *)(data);
+    struct proc_intr *intr_info;
+
+    (void) vect_id;
+    
+    intr_info = &(vring_hw->intr_info);
+    atomic_flag_clear((atomic_uint *)&(intr_info->data));
+
+    OPEN_AMP_DBG(3, "vector=%d,data=%p\n", vect_id, data);
+
+    return 0;
+}
+
+static int _poll(struct hil_proc * proc,int nonblock)
+{
+    struct proc_vring *vring;
+    struct proc_intr *intr_info;
+    int i = 0;
+    int kicked = 0;
+
+    while(1) {
+        vring = &proc->vdev.vring_info[i];
+        intr_info = &(vring->intr_info);
+        if (!(atomic_flag_test_and_set(
+            (atomic_uint *)&(intr_info->data)))) {
+            virtqueue_notification(vring->vq);
+            kicked = 1;
+            if (i)
+                return 0;
+            i++;
+        } else if (!i) {
+            i++;
+        } else {
+            if (kicked) {
+                return 0;
+            } else if (nonblock) {
+                return -EAGAIN;
+            } else {
+                _rproc_wait();
+                i--;
+                continue;
+            }
+        }
+    }
+}
+
+static int _initialize(struct hil_proc * proc)
+{
+    int i;
+    struct proc_intr *intr_info;
+
+    for (i = 0; i < 2; i++) {
+        intr_info = &(proc->vdev.vring_info[i].intr_info);
+        atomic_store((atomic_uint *)&(intr_info->data), 1);
+    }
+
+    return 0;    
+}
+
+static void _release(struct hil_proc * proc)
+{
+    (void)proc;
+    return;
+}
+
+#ifdef DBG_REG_SHOW
+void *vAddr_CM_IPU1_SHOW = NULL;
+void *vAddr_RM_IPU1_SHOW = NULL;
+void *vAddr_UNICACHE_SHOW = NULL;
+#endif
+
+static STATUS boot_remote_cpu
+    (
+    UINT32 entry,   /* Entry point */
+    UINT32 cpu	    /* CPU number */ 
+    )
+{
+    STATUS stat = OK;
+    void *vAddr;
+    void *vAddr_RM_IPU1 = NULL;
+    int cnt;
+     
+    vAddr = (UINT32)pmapGlobalMap(CM_IPU1_BASE, 
+                                  CM_IPU1_SIZE, 
+                                  (MMU_ATTR_CACHE_OFF|MMU_ATTR_PROT_MSK));
+    if ((void*)vAddr == PMAP_FAILED){
+        OPEN_AMP_MSG("Failed to map 0x%08x, 0x%08x\n", 
+                     CM_IPU1_BASE, CM_IPU1_SIZE);
+        return (ERROR);
+    }
+    OPEN_AMP_DBG(5,"Map 0x%08x ==> 0x%08x\n",CM_IPU1_BASE, vAddr);
+     
+    /* setup and wakeup clock of IPU1 */
+    /* mw.l 0x4a005540 0x2 1;mw.l 0x4a005500 0x2 1;mw.l 0x4a005520 0x01070001 1 */
+    VX_INSTR_BARRIER();
+    REG(vAddr,0x40)=2;  /* CM_IPU_CLKSTCTRL */
+    /* CM_IPU_CLKSTCTRL (0x4A005540)
+       bit 18 (R): CLKACTIVITY_MCASP1_AHCLKR- the state of the MCASP1_AHCLKR clock
+       bit 17 (R): CLKACTIVITY_MCASP1_AHCLKX- the state of the MCASP1_AHCLKX clock
+       bit 16 (R): CLKACTIVITY_MCASP1_AUX_GFCLK- the state of the MCASP1_AUX_GFCLK clock
+       bit 14 (R): CLKACTIVITY_UART6_GFCLK- the state of the UART6_GFCLK clock
+       bit 13 (R): CLKACTIVITY_IPU_96M_GFCLK- the state of the IPU_96M_GFCLK clock
+       bit 12 (R): CLKACTIVITY_TIMER8_GFCLK- the state of the  TIMER8_GFCLK clock
+       bit 11 (R): CLKACTIVITY_TIMER7_GFCLK- the state of the  TIMER7_GFCLK clock
+       bit 10 (R): CLKACTIVITY_TIMER6_GFCLK- the state of the  TIMER6_GFCLK clock
+       bit 9 (R): CLKACTIVITY_TIMER5_GFCLK- the state of the  TIMER5_GFCLK clock
+       bit 8 (R): CLKACTIVITY_IPU_L3_GICLK- the state of the  IPU_L3_GICLK clock
+            0x0: Corresponding clock is definitely gated
+            0x1: Corresponding clock is running or gating/ungating transition is on-going
+       bit 1:0 (RW): CLKTRCTRL-Controls the clock state transition of the ABE clock domain.
+            0x0: NO_SLEEP: Sleep transition cannot be initiated. Wakeup 
+                 transition may however occur.
+            0x1: SW_SLEEP: Start a software forced sleep transition on the domain.
+            0x2: SW_WKUP: Start a software forced wake-up transition on the domain.
+            0x3: HW_AUTO: Automatic transition is enabled. Sleep and wakeup 
+                 transition are based upon hardware conditions.
+    */
+    
+    VX_INSTR_BARRIER();
+    REG(vAddr,0x00)=2;  /* CM_IPU1_CLKSTCTRL */
+    /* CM_IPU1_CLKSTCTRL (0x4A005500)
+       bit 8 (R): CLKACTIVITY_IPU1_GFCLK-the state of the IPU1_GFCLK clock
+            0x0: Corresponding clock is definitely gated
+            0x1: Corresponding clock is running or gating/ungating 
+                 transition is on-going
+       bit 1:0 (RW): CLKTRCTRL-Controls the clock state transition of the 
+                     IPU1 clock domain.
+            0x0: NO_SLEEP: Sleep transition cannot be initiated. Wakeup 
+                 transition may however occur.
+            0x1: SW_SLEEP: Start a software forced sleep transition on the domain.
+            0x2: SW_WKUP: Start a software forced wake-up transition on the domain.
+            0x3: HW_AUTO: Automatic transition is enabled. Sleep and wakeup 
+                 transition are based upon hardware conditions.
+    */
+    
+    VX_INSTR_BARRIER();
+    REG(vAddr,0x20)=0x01000001; /*  0x01070001,CM_IPU1_IPU1_CLKCTRL */
+    /* CM_IPU1_IPU1_CLKCTRL (0x4A005520)
+       bit 24 (RW): CLKSEL-Selects the timer functional clock
+            0x0: Selects DPLL_ABE_X2_CLK as the functional clock
+            0x1: Selects CORE_IPU_ISS_BOOST_CLK as the functional clock
+       bit 18 (R): STBYST-Module standby status. [warm reset insensitive]
+            0x0: Module is functional (not in standby)
+            0x1: Module is in standby
+       bit 17:16 (R): IDLEST-Module idle status. [warm reset insensitive]
+            0x0: Module is fully functional, including OCP
+            0x1: Module is performing transition: wakeup, or sleep, or sleep abortion
+            0x2: Module is in Idle mode (only OCP part). It is functional 
+                 if using separate functional clock
+            0x3: Module is disabled and cannot be accessed
+       bit 1:0 (RW): MODULEMODE-Control the way mandatory clocks are managed.
+            0x0: Module is disabled by SW.
+            0x1: Module is managed automatically by HW
+            0x2: Reserved
+            0x3: Reserved
+    */
+    VX_INSTR_BARRIER();
+         
+#ifdef DBG_REG_SHOW
+    vAddr_CM_IPU1_SHOW = vAddr;
+#else
+    stat = pmapGlobalUnmap(vAddr, CM_IPU1_SIZE);
+    if (stat != OK)
+    {
+        OPEN_AMP_MSG("Failed to unmap 0x%08x, 0x%08x\n", vAddr, CM_IPU1_SIZE);
+        return (ERROR);
+    }
+#endif
+     
+    vAddr = (UINT32)pmapGlobalMap(RM_IPU1_BASE, 
+                                  RM_IPU1_SIZE, 
+                                  (MMU_ATTR_CACHE_OFF|MMU_ATTR_PROT_MSK));
+    if ((void*)vAddr == PMAP_FAILED){
+        OPEN_AMP_MSG("Failed to map 0x%08x, 0x%08x\n", 
+                     RM_IPU1_BASE, RM_IPU1_SIZE);
+        return (ERROR);
+    }
+    OPEN_AMP_DBG(5,"Map 0x%08x ==> 0x%08x\n",RM_IPU1_BASE, vAddr);
+      
+    vAddr_RM_IPU1 = vAddr;
+#ifdef DBG_REG_SHOW
+    vAddr_RM_IPU1_SHOW = vAddr;
+#endif
+    /* ready to reset IPU_Cx */
+    /* mw.l 0x4ae06510 7 1;mw.l 0x4ae06514 7 1;mw.l 0x4ae06510 3 1 */
+    VX_INSTR_BARRIER();
+    REG(vAddr,0x10)=7;  /*  RM_IPU1_RSTCTRL */
+    /*  RM_IPU1_RSTCTRL (0x4AE06510)
+       bit 2 (RW): RST_IPU-IPU1 system reset control.
+            0x0: Reset is cleared for IPU CACHE MMU
+            0x1: Reset is asserted for the IPU CACHE MMU
+       bit 1 (RW): RST_CPU1-IPU Cortex M4 CPU1 reset control.
+            0x0: Reset is cleared for the IPU Cortex M4 CPU1
+            0x1: Reset is asserted for the IPU Cortex M4 CPU1
+       bit 0 (RW): RST_CPU0-IPU Cortex M4 CPU0 reset control.
+            0x0: Reset is cleared for the IPU Cortex M4 CPU0
+            0x1: Reset is asserted for the IPU Cortex M4 CPU0
+    */
+
+    VX_INSTR_BARRIER();
+    REG(vAddr,0x14)=7;  /* RM_IPU1_RSTST */
+    /*  RM_IPU1_RSTST (0x4AE06514)
+       bit 6 (RW): RST_ICECRUSHER_CPU1-Cortex M4 CPU1 has been reset due to 
+                   IPU ICECRUSHER1 reset source
+            0x0: No icecrusher reset
+            0x1: CPU1 has been reset upon icecrusher reset
+       bit 5 (RW): RST_ICECRUSHER_CPU0-Cortex M4 CPU0 has been reset due to 
+                   IPU ICECRUSHER0 reset source
+            0x0: No icecrusher reset
+            0x1: CPU0 has been reset upon icecrusher reset
+       bit 4 (RW): RST_EMULATION_CPU1-Cortex M4 CPU1 has been reset due to 
+                   emulation reset source
+            0x0: No emulation reset
+            0x1: CPU1 has been reset upon emulation reset
+       bit 3 (RW): RST_EMULATION_CPU0-Cortex M4 CPU0 has been reset due to 
+                   emulation reset source
+            0x0: No emulation reset
+            0x1: CPU0 has been reset upon emulation reset
+       bit 2 (RW): RST_IPU-IPU system software reset status
+            0x0: No software reset occurred
+            0x1: IPU MMU and CACHE interface has been reset upon software reset
+       bit 1 (RW): RST_CPU1-IPU Cortex-M4 CPU1 software reset status
+            0x0: No software reset occurred
+            0x1: Cortex M4 CPU1 has been reset upon software reset
+       bit 0 (RW): RST_CPU0-IPU Cortex-M4 CPU0 software reset status
+            0x0: No software reset occurred
+            0x1: Cortex M4 CPU0 has been reset upon software reset
+    */
+    
+    VX_INSTR_BARRIER();
+    vxbMsDelay(1);
+    REG(vAddr,0x10)=3;  /*  RM_IPU1_RSTCTRL */
+    VX_INSTR_BARRIER();
+          
+    vAddr = (UINT32)pmapGlobalMap(IPU1_UNICACHE_BASE, 
+                                  IPU1_UNICACHE_SIZE, 
+                                  (MMU_ATTR_CACHE_OFF|MMU_ATTR_PROT_MSK));
+    if ((void*)vAddr == PMAP_FAILED){
+        OPEN_AMP_MSG("Failed to map 0x%08x, 0x%08x\n", 
+                     IPU1_UNICACHE_BASE, IPU1_UNICACHE_SIZE);
+        return (ERROR);
+    }
+    OPEN_AMP_DBG(5,"Map 0x%08x ==> 0x%08x\n",IPU1_UNICACHE_BASE, vAddr);
+       
+    /* reset cache & mmu and init mmu table */
+    /* mw.l 0x58880A20 0 10;mw.l 0x58880820 0x80000000 1;mw.l 0x58880840 0x00ff0089 1 */
+    VX_INSTR_BARRIER();
+    for (cnt = 0; cnt < 10; cnt++)
+    {
+        REG(vAddr, 0xA20 + cnt * 4) = 0; /* CACHE_MMU_SMALL_POLICY_k, k = 0 to 9*/
+        VX_INSTR_BARRIER();
+    }
+    /*  CACHE_MMU_SMALL_POLICY_k (0x58880A20+0x4 * k) , k = 0 to 9
+           bit 23 (RW): L2_WR_POLICY-L2 write policy
+           bit 19 (RW): L1_WR_POLICY-L1 write policy
+                0x0: Write through
+                0x1: Write back
+           bit 22 (RW): L2_ALLOCATE-L2 allocate policy
+           bit 18 (RW): L1_ALLOCATE-L1 allocate policy
+                0x0: No writes are allocated
+                0x1: Follow sideband
+           bit 21 (RW): L2_POSTED-L2 posted policy
+           bit 17 (RW): L1_POSTED-L1 posted policy
+                0x0: Non-posted
+                0x1: Posted
+           bit 20 (RW): L2_CACHEABLE-L2 cache policy
+           bit 16 (RW): L1_CACHEABLE-L1 cache policy
+                0x0: Non-cacheable
+                0x1: Cacheable
+           bit 8 (R): COHERENCY-Coherency
+                0x0: ?
+                0x1: ?
+           bit 7 (RW): EXCLUSION-Cache exclusion
+                0x0: Do not send exclusion sideband
+                0x1: Send exclusion sideband
+           bit 6 (RW): PRELOAD-Preload region
+                0x0: Do not preload
+                0x1: Preload
+           bit 5 (RW): READ-Read only
+                0x0: ?
+                0x1: ?
+           bit 4 (RW): EXECUTE-Execute only
+                0x0: ?
+                0x1: ?
+           bit 3 (RW): VOLATILE-Volatile qualifier
+                0x0: Do not follow volatile qualifier
+                0x1: Follow volatile qualifier
+           bit 1 (RW): SIZE-Size of page
+                0x0: 4 KiB
+                0x1: 16 KiB
+           bit 0 (RW): ENABLE-Enable page
+                0x0: Page not enabled
+                0x1: Page enabled
+    */
+    
+    REG(vAddr,0x820)=0x80000000;  /* CACHE_MMU_LARGE_XLTE_i, i = 0 to 3*/
+    /*  CACHE_MMU_LARGE_XLTE_i, (0x58880820 + 0x4 * i), i = 0 to 3
+           bit 31:25 (RW): ADDRESS-Logical source translated address
+           bit 0 (RW): IGNORE-Do not use translated address.
+    */
+    
+    VX_INSTR_BARRIER();
+    REG(vAddr,0x840)=0x00ff0089;  /*  CACHE_MMU_LARGE_POLICY_i, i = 0 to 3 */
+    /*  CACHE_MMU_LARGE_POLICY_i, (0x58880840 + 0x4 * i), i = 0 to 3
+           bit 23 (RW): L2_WR_POLICY-L2 write policy
+           bit 19 (RW): L1_WR_POLICY-L1 write policy
+                0x0: Write through
+                0x1: Write back
+           bit 22 (RW): L2_ALLOCATE-L2 allocate policy
+           bit 18 (RW): L1_ALLOCATE-L1 allocate policy
+                0x0: No writes are allocated
+                0x1: Follow sideband
+           bit 21 (RW): L2_POSTED-L2 posted policy
+           bit 17 (RW): L1_POSTED-L1 posted policy
+                0x0: Non-posted
+                0x1: Posted
+           bit 20 (RW): L2_CACHEABLE-L2 cache policy
+           bit 16 (RW): L1_CACHEABLE-L1 cache policy
+                0x0: Non-cacheable
+                0x1: Cacheable
+           bit 7 (RW): EXCLUSION-Cache exclusion
+                0x0: Do not send exclusion sideband
+                0x1: Send exclusion sideband
+           bit 6 (RW): PRELOAD-Preload region
+                0x0: Do not preload
+                0x1: Preload
+           bit 5 (RW): READ-Read only
+                0x0: ?
+                0x1: ?
+           bit 4 (RW): EXECUTE-Execute only
+                0x0: ?
+                0x1: ?
+           bit 3 (RW): VOLATILE-Volatile qualifier
+                0x0: Do not follow volatile qualifier
+                0x1: Follow volatile qualifier
+           bit 1 (RW): SIZE-Size of page
+                0x0: 32 MiB
+                0x1: 512 MiB
+           bit 0 (RW): ENABLE-Enable page
+                0x0: Page not enabled
+                0x1: Page enabled
+    */
+    VX_INSTR_BARRIER();
+          
+    /* set the temp mmu table */
+    /* mw.l 0x58880808 0x80000000 1;mw.l 0x58880828 0x80000000 1;mw.l 0x58880848 0xff0089 1 */
+    REG(vAddr,0x808)=0x80000000;    /* CACHE_MMU_LARGE_ADDR_i */
+    /*  CACHE_MMU_LARGE_ADDR_i, (0x58880800 + 0x4 * i), i = 0 to 3
+           bit 31:25 (RW): ADDRESS-Logical source address
+    */
+    
+    VX_INSTR_BARRIER();
+    REG(vAddr,0x828)=0x80000000;    /* CACHE_MMU_LARGE_XLTE_i, i = 0 to 3*/
+    VX_INSTR_BARRIER();
+    REG(vAddr,0x848)=0x00ff0089;    /*  CACHE_MMU_LARGE_POLICY_i, i = 0 to 3 */
+    VX_INSTR_BARRIER();
+    
+#ifdef DBG_REG_SHOW
+    vAddr_UNICACHE_SHOW = vAddr;
+#else
+    stat = pmapGlobalUnmap(vAddr, IPU1_UNICACHE_SIZE);
+    if (stat != OK)
+    {
+        OPEN_AMP_MSG("Failed to unmap 0x%08x, 0x%08x\n", 
+                      vAddr, IPU1_UNICACHE_SIZE);
+        return (ERROR);
+    }
+#endif
+      
+    /* reset IPU1_C0 */
+    /* mw.l 0x4ae06510 2 1 */
+    /* Boot up vxWorks on IPU_C1, command is */
+    /* reset IPU1_C1 */
+    /* mw.l 0x4ae06510 1 1 */
+    vAddr = vAddr_RM_IPU1;
+    REG(vAddr,0x10)=2;  /*  RM_IPU1_RSTCTRL */
+    
+#ifdef DBG_REG_SHOW
+#else
+    stat = pmapGlobalUnmap(vAddr, RM_IPU1_SIZE);
+    if (stat != OK)
+    {
+         OPEN_AMP_MSG("Failed to unmap 0x%08x, 0x%08x\n", vAddr, RM_IPU1_SIZE);
+         return (ERROR);
+    }
+#endif
+
+    OPEN_AMP_DBG(5,"OK!\n");
+    return (OK);
+    }
+
+int metal_machine_load_remote(void *fw, void *destination,
+				    Elf32_Off offset, Elf32_Word size)
+{
+    void *vaddr;
+    char *src = (char *)fw;
+    UINT32 paddr = (UINT32)destination;
+    
+    if(paddr < 0x80000000)
+    {
+        paddr += 0x80000000;
+    }
+
+    vaddr = pmapGlobalMap(paddr, size, 
+                          (MMU_ATTR_CACHE_WRITETHRU |
+                           MMU_ATTR_CACHE_COHERENCY |
+                           MMU_ATTR_PROT_MSK));
+    if (vaddr == PMAP_FAILED)
+    {
+        return -1;
+    }
+    OPEN_AMP_DBG(2, "destination=%p,paddr=%x,vaddr=%p,sh_offset=%d,sh_size=%d\n", 
+                    destination, paddr, vaddr, offset, size);
+    /* Seek to the specified offset. */
+    src = src + offset;
+
+    /* Read the data. */
+    memcpy((char *)vaddr, src, size);
+
+    pmapGlobalUnmap(vaddr, size);
+    
+    return 0;
+}
+
+void * metal_machine_io_mem_map(unsigned int pa, unsigned int size, unsigned int flags)
+{
+    (void)flags;
+    return pmapGlobalMap(pa, size, (MMU_ATTR_CACHE_OFF|MMU_ATTR_PROT_MSK));
+}
+
+#ifdef DBG_REG_SHOW
+
+void bootRegShow(void)
+{
+    void * vAddr;
+    int cnt;
+    
+    vAddr = vAddr_CM_IPU1_SHOW;
+    OPEN_AMP_MSG("Map 0x%08x ==> 0x%08x\n",CM_IPU1_BASE, vAddr);
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",CM_IPU1_BASE+0x00, REG(vAddr,0x00));
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",CM_IPU1_BASE+0x04, REG(vAddr,0x04));
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",CM_IPU1_BASE+0x08, REG(vAddr,0x08));
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",CM_IPU1_BASE+0x20, REG(vAddr,0x20));
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",CM_IPU1_BASE+0x40, REG(vAddr,0x40));
+    
+    vAddr = vAddr_RM_IPU1_SHOW;
+    OPEN_AMP_MSG("Map 0x%08x ==> 0x%08x\n",RM_IPU1_BASE, vAddr);
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",RM_IPU1_BASE+0x00, REG(vAddr,0x00));
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",RM_IPU1_BASE+0x04, REG(vAddr,0x04));
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",RM_IPU1_BASE+0x10, REG(vAddr,0x10));
+    OPEN_AMP_MSG("[0x%x] == 0x%08x\n",RM_IPU1_BASE+0x14, REG(vAddr,0x14));
+    
+    vAddr = vAddr_UNICACHE_SHOW;
+    OPEN_AMP_MSG("Map 0x%08x ==> 0x%08x\n",IPU1_UNICACHE_BASE, vAddr);
+    for (cnt=0; cnt<4; cnt++)
+    {
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0x800+4*cnt, REG(vAddr,0x800+4*cnt));
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0x820+4*cnt, REG(vAddr,0x820+4*cnt));
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0x840+4*cnt, REG(vAddr,0x840+4*cnt));
+    }
+    for (cnt=0; cnt<2; cnt++)
+    {
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0x860+4*cnt, REG(vAddr,0x860+4*cnt));
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0x8a0+4*cnt, REG(vAddr,0x8a0+4*cnt));
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0x8e0+4*cnt, REG(vAddr,0x8e0+4*cnt));
+    }
+    for (cnt=0; cnt<10; cnt++)
+    {
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0x920+4*cnt, REG(vAddr,0x920+4*cnt));
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0x9a0+4*cnt, REG(vAddr,0x9a0+4*cnt));
+        OPEN_AMP_MSG("%d.[0x%x] == 0x%08x\n",cnt,IPU1_UNICACHE_BASE+0xa20+4*cnt, REG(vAddr,0xa20+4*cnt));
+    }
+}
+#endif
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/sitara/sitara_ca15_info.c openamp/lib/remoteproc/drivers/sitara/sitara_ca15_info.c
--- open-amp-2016.10/lib/remoteproc/drivers/sitara/sitara_ca15_info.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/sitara/sitara_ca15_info.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,141 @@
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ * Copyright (c) 2016 Wind River Systems, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of Mentor Graphics Corporation nor the names of its
+ *    contributors may be used to endorse or promote products derived from this
+ *    software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**************************************************************************
+ * FILE NAME
+ *
+ *       sitara_info.c
+ *
+ * DESCRIPTION
+ *
+ *       This file implements APIs to get platform specific
+ *       information for OpenAMP. 
+ *
+ **************************************************************************/
+
+#include "openamp/hil.h"
+#include "metal/sys.h"
+#include "metal/shmem.h"
+#include "metal/device.h"
+#include "metal/io.h"
+
+/* Reference implementation that show cases platform_get_cpu_info and 
+ platform_get_for_firmware API implementation for Bare metal environment */
+
+extern struct hil_platform_ops sitara_ca15_proc_ops;
+
+#define SHM_ADDR     (void *)(0x40500000) /* OCMC_RAM3 */
+#define SHM_SIZE     (0x20000 - 0x8000)
+
+#define VRING0_IPI_VECT                   0
+#define VRING1_IPI_VECT                   1
+#define VRING2_IPI_VECT                   2
+#define VRING3_IPI_VECT                   3
+#define MASTER_CPU_ID                     0
+#define REMOTE_CPU_ID                     1
+#define RPMSG_CHAN_NAME                   "rpmsg-openamp-demo-channel"
+
+
+const metal_phys_addr_t metal_ti_sitara_phys[] = {
+    0x40518000, /**< base vring address */
+    0x40500000, /**< Shared memory management device */
+};
+
+#define SHM_DEV_NAME           "40500000.shm"
+#define VRING_DEV_NAME         "40518000.vring"
+
+struct metal_generic_shmem metal_shm_table[] = {
+    {
+        /* vring device */
+        VRING_DEV_NAME,
+        {
+            (void *)-1,             /* not need to tranfer for local mem address */
+            &metal_ti_sitara_phys[0],  /* from RING_TX and RING_RX in rsc_table.c */
+            0x8000,
+            (sizeof(metal_phys_addr_t) << 3),
+            (unsigned long)(-1),
+            METAL_UNCACHED | METAL_SHARED_MEM,
+            {NULL},
+        },
+        {NULL},
+    },
+    {
+        /* Shared memory management device */
+        SHM_DEV_NAME,
+        {
+            (void *)-1,
+            &metal_ti_sitara_phys[1],
+            0x18000,
+            (sizeof(metal_phys_addr_t) << 3),
+            (unsigned long)(-1),
+            METAL_UNCACHED | METAL_SHARED_MEM,
+            {NULL},
+        },
+        {NULL},
+    },
+};
+
+const int metal_shm_table_size = sizeof(metal_shm_table)/sizeof(struct metal_generic_shmem);
+
+struct firmware_info fw_table[] =
+{
+    {"/romfs/vxWorks_romResident",
+     0,
+     0}
+};
+
+const int fw_table_size = sizeof(fw_table)/sizeof(struct firmware_info);
+
+struct hil_proc *platform_create_proc(int proc_index)
+{
+    struct hil_proc *proc;
+
+    (void)proc_index;
+    proc = hil_create_proc(&sitara_ca15_proc_ops, MASTER_CPU_ID, NULL);
+    if (!proc)
+    	return NULL;
+
+    /* Setup IPI info */
+    hil_set_ipi(proc, 0, VRING0_IPI_VECT, NULL);
+    hil_set_ipi(proc, 1, VRING1_IPI_VECT, NULL);
+
+    hil_set_vring(proc, 0, NULL, VRING_DEV_NAME);
+    hil_set_vring(proc, 1, NULL, VRING_DEV_NAME);
+
+    /* Setup shared memory info */
+    hil_set_shm(proc, NULL, SHM_DEV_NAME, 0, SHM_SIZE);
+
+    /* Setup RPMSG channel info */
+    hil_set_rpmsg_channel(proc, 0, RPMSG_CHAN_NAME);
+
+    return proc;
+}
+
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/sitara/sitara_cm4.c openamp/lib/remoteproc/drivers/sitara/sitara_cm4.c
--- open-amp-2016.10/lib/remoteproc/drivers/sitara/sitara_cm4.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/sitara/sitara_cm4.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,202 @@
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ * Copyright (c) 2016 Wind River Systems, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of Mentor Graphics Corporation nor the names of its
+ *    contributors may be used to endorse or promote products derived from this
+ *    software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**************************************************************************
+ * FILE NAME
+ *
+ *       sitara_cm4.c
+ *
+ * DESCRIPTION
+ *
+ *       This file is the Implementation of IPC hardware layer interface
+ *       for TI Sitara AM572x platform.
+ *
+ **************************************************************************/
+
+#include <vxWorks.h>
+#include "metal/atomic.h"
+#include "metal/irq.h"
+#include "metal/sys.h"
+#include "openamp/hil.h"
+#include "openamp/elf_loader.h"
+#include "openamp/open_amp_vx.h"
+
+char * openampRole = "remote";
+UINT32 ipiMboxUser = 2;   /* IPU1 is user 2 of mailbox1 */
+UINT32 ipiMboxTx = 4;
+UINT32 ipiMboxRx = 0;
+
+#define _rproc_wait() taskDelay(0)
+
+
+/*--------------------------- Declare Functions ------------------------ */
+static int _enable_interrupt(struct proc_vring *vring_hw);
+static void _notify(struct hil_proc *proc, struct proc_intr *intr_info);
+static int _boot_cpu(struct hil_proc *proc, unsigned int load_addr);
+static void _shutdown_cpu(struct hil_proc *proc);
+static int _poll(struct hil_proc *proc, int nonblock);
+static int _initialize(struct hil_proc *proc);
+static void _release(struct hil_proc *proc);
+
+static int platform_isr(int vect_id, void *data);
+
+
+/*--------------------------- Globals ---------------------------------- */
+struct hil_platform_ops sitara_cm4_proc_ops = {
+    .enable_interrupt   = _enable_interrupt,
+    .notify             = _notify,
+    .boot_cpu           = _boot_cpu,
+    .shutdown_cpu       = _shutdown_cpu,
+    .poll               = _poll,
+    .initialize         = _initialize,
+    .release            = _release,
+};
+
+static int _enable_interrupt(struct proc_vring *vring_hw)
+{
+    OPEN_AMP_DBG(3, "vring_hw=%p\n", vring_hw);
+    /* Register ISR*/    
+    metal_irq_register(vring_hw->intr_info.vect_id, platform_isr,
+                    vring_hw->intr_info.dev, vring_hw);
+
+    /* Enable the interrupts */
+    metal_irq_enable(vring_hw->intr_info.vect_id);
+
+    return 0;
+}
+
+static void _notify(struct hil_proc *proc, struct proc_intr *intr_info) 
+{
+    OPEN_AMP_DBG(3, "cpu_id=%d,intr_info=%p\n", proc->cpu_id, intr_info);
+    if (vx_openamp_ipi_notify)
+        vx_openamp_ipi_notify(intr_info->vect_id);
+}
+
+static int _boot_cpu(struct hil_proc *proc, unsigned int load_addr)
+{
+    OPEN_AMP_DBG(3, "cpu_id=%d,load_addr=%d\n", proc->cpu_id, load_addr);
+    return 0;
+}
+
+static void _shutdown_cpu(struct hil_proc *proc)
+{
+    OPEN_AMP_DBG(3, "cpu_id=%d\n", proc->cpu_id);
+}
+
+static int platform_isr(int vect_id, void *data)
+{
+    struct proc_vring *vring_hw = (struct proc_vring *)(data);
+    struct proc_intr *intr_info;
+
+    (void) vect_id;
+    
+    intr_info = &(vring_hw->intr_info);
+    atomic_flag_clear((atomic_uint *)&(intr_info->data));
+
+    OPEN_AMP_DBG(3, "vector=%d,data=%p\n", vect_id, data);
+
+    return 0;
+}
+
+static int _poll(struct hil_proc *proc, int nonblock)
+{
+    struct proc_vring *vring;
+    struct proc_intr *intr_info;
+    int i = 0;
+    int kicked = 0;
+
+    while(1) {
+        vring = &proc->vdev.vring_info[i];
+        intr_info = &(vring->intr_info);
+        if (!(atomic_flag_test_and_set(
+            (atomic_uint *)&(intr_info->data)))) {
+            virtqueue_notification(vring->vq);
+            kicked = 1;
+            if (i)
+                return 0;
+            i++;
+        } else if (!i) {
+            i++;
+        } else {
+            if (kicked) {
+                return 0;
+            } else if (nonblock) {
+                return -EAGAIN;
+            } else {
+                _rproc_wait();
+                i--;
+                continue;
+            }
+        }
+    }
+}
+
+static int _initialize(struct hil_proc *proc)
+{
+    int i;
+    struct proc_intr *intr_info;
+
+    for (i = 0; i < 2; i++) {
+        intr_info = &(proc->vdev.vring_info[i].intr_info);
+        atomic_store((atomic_uint *)&(intr_info->data), 1);
+    }
+
+    return 0;    
+}
+
+static void _release(struct hil_proc *proc)
+{
+    (void)proc;
+    return;
+}
+
+int metal_machine_load_remote(void *src, void *destination,
+				    Elf32_Off offset, Elf32_Word size)
+{
+    /* nothing to do on slave */
+    return 0;
+}
+
+#define DDR_CODE_ALIAS_PHYS (0x80000000)
+#define DDR_CODE_ALIAS_BASE (0x10000000)
+#define DDR_CODE_ALIAS_SIZE (0x10000000-0x8000)
+
+void * metal_machine_io_mem_map(unsigned int pa, unsigned int size, 
+                                          unsigned int flags)
+{
+    /*if ((pa >= DDR_CODE_ALIAS_PHYS) && 
+        ((pa+size)<=(DDR_CODE_ALIAS_PHYS+DDR_CODE_ALIAS_SIZE)))
+    {
+        return (pa - DDR_CODE_ALIAS_PHYS + DDR_CODE_ALIAS_BASE);
+    }*/
+	
+    return (void *)pa;
+}
+
diff -uparN open-amp-2016.10/lib/remoteproc/drivers/sitara/sitara_cm4_info.c openamp/lib/remoteproc/drivers/sitara/sitara_cm4_info.c
--- open-amp-2016.10/lib/remoteproc/drivers/sitara/sitara_cm4_info.c	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/drivers/sitara/sitara_cm4_info.c	2017-02-24 14:39:33.000000000 +0800
@@ -0,0 +1,121 @@
+/*
+ * Copyright (c) 2014, Mentor Graphics Corporation
+ * All rights reserved.
+ * Copyright (c) 2016 Wind River Systems, Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ * 3. Neither the name of Mentor Graphics Corporation nor the names of its
+ *    contributors may be used to endorse or promote products derived from this
+ *    software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**************************************************************************
+ * FILE NAME
+ *
+ *       sitara_info.c
+ *
+ * DESCRIPTION
+ *
+ *       This file implements APIs to get platform specific
+ *       information for OpenAMP. 
+ *
+ **************************************************************************/
+
+#include "openamp/hil.h"
+#include "metal/sys.h"
+#include "metal/shmem.h"
+#include "metal/device.h"
+#include "metal/io.h"
+
+/* Reference implementation that show cases platform_get_cpu_info and 
+ platform_get_for_firmware API implementation for Bare metal environment */
+
+extern struct hil_platform_ops sitara_cm4_proc_ops;
+
+#define SHM_ADDR     (void *)(0x40500000) /* OCMC_RAM3 */
+#define SHM_SIZE     (0x20000 - 0x8000)
+
+#define VRING0_IPI_VECT                   0
+#define VRING1_IPI_VECT                   1
+#define VRING2_IPI_VECT                   2
+#define VRING3_IPI_VECT                   3
+#define MASTER_CPU_ID                     0
+#define REMOTE_CPU_ID                     1
+#define RPMSG_CHAN_NAME                   "rpmsg-openamp-demo-channel"
+
+const metal_phys_addr_t metal_ti_sitara_phys[] = {
+    0x40518000, /**< base vring address */
+};
+
+#define VRING_DEV_NAME         "40518000.vring"
+
+struct metal_generic_shmem metal_shm_table[] = {
+    {
+        /* vring device */
+        VRING_DEV_NAME,
+        {
+            (void *)0x40518000,       /* not need to tranfer for local mem address */
+            &metal_ti_sitara_phys[0],    /* from RING_TX and RING_RX in rsc_table.c */
+            0x8000,
+            (sizeof(metal_phys_addr_t) << 3),
+            (unsigned long)(-1),
+            METAL_UNCACHED | METAL_SHARED_MEM,
+            {NULL},
+        },
+        {NULL},
+    },
+};
+
+const int metal_shm_table_size = sizeof(metal_shm_table)/sizeof(struct metal_generic_shmem);
+
+struct firmware_info fw_table[] =
+{
+    {"",
+     0,
+     0}
+};
+
+const int fw_table_size = sizeof(fw_table)/sizeof(struct firmware_info);
+
+struct hil_proc *platform_create_proc(int proc_index)
+{
+    struct hil_proc *proc;
+
+    (void)proc_index;
+    proc = hil_create_proc(&sitara_cm4_proc_ops, MASTER_CPU_ID, NULL);
+    if (!proc)
+    	return NULL;
+
+    /* Setup IPI info */
+    hil_set_ipi(proc, 0, VRING0_IPI_VECT, NULL);
+    hil_set_ipi(proc, 1, VRING1_IPI_VECT, NULL);
+
+    hil_set_vring(proc, 0, NULL, VRING_DEV_NAME);
+    hil_set_vring(proc, 1, NULL, VRING_DEV_NAME);
+
+    /* Setup RPMSG channel info */
+    hil_set_rpmsg_channel(proc, 0, RPMSG_CHAN_NAME);
+
+    return proc;
+}
+
+
diff -uparN open-amp-2016.10/lib/remoteproc/elf_loader.c openamp/lib/remoteproc/elf_loader.c
--- open-amp-2016.10/lib/remoteproc/elf_loader.c	2016-11-05 00:18:46.000000000 +0800
+++ openamp/lib/remoteproc/elf_loader.c	2017-02-24 14:39:34.000000000 +0800
@@ -1,6 +1,7 @@
 /*
  * Copyright (c) 2014, Mentor Graphics Corporation
  * All rights reserved.
+ * Copyright (c) 2016 Wind River System, Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -572,7 +573,7 @@ static int elf_loader_load_sections(void
 				 * be copied. */
 				destination = (char *)(current->sh_addr);
 				status =
-				    elf_loader_seek_and_read(firmware,
+				    metal_machine_load_remote(firmware,
 							     destination,
 							     current->sh_offset,
 							     current->sh_size);
diff -uparN open-amp-2016.10/lib/remoteproc/Makefile openamp/lib/remoteproc/Makefile
--- open-amp-2016.10/lib/remoteproc/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/remoteproc/Makefile	2017-02-24 14:39:34.000000000 +0800
@@ -0,0 +1,50 @@
+# Makefile - makefile for OpenAMP remoteproc
+#
+# Copyright (c) 2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+# 10nov16,ghl  Create for OpenAMP on vxworks-7 (F8373).
+#
+# DESCRIPTION
+# This file contains the makefile rules for building OpenAMP library.
+#
+
+LIB_BASE_NAME = OPENAMP
+
+include $(WIND_KRNL_MK)/defs.library.mk
+
+SUBDIRS = drivers
+
+OBJS_ARMARCH7M = remoteproc.o rsc_table_parser.o remoteproc_loader.o elf_loader.o
+OBJS_ARMARCH7  = remoteproc.o rsc_table_parser.o remoteproc_loader.o elf_loader.o
+DOC_FILES      = remoteproc.c rsc_table_parser.c remoteproc_loader.c elf_loader.c
+
+OBJS=$(OBJS_$(CPU))
+
+include $(WIND_KRNL_MK)/rules.library.mk
diff -uparN open-amp-2016.10/lib/remoteproc/remoteproc.c openamp/lib/remoteproc/remoteproc.c
--- open-amp-2016.10/lib/remoteproc/remoteproc.c	2016-11-05 00:18:46.000000000 +0800
+++ openamp/lib/remoteproc/remoteproc.c	2017-02-24 14:39:34.000000000 +0800
@@ -2,6 +2,7 @@
  * Copyright (c) 2014, Mentor Graphics Corporation
  * All rights reserved.
  * Copyright (c) 2015 Xilinx, Inc. All rights reserved.
+ * Copyright (c) 2016 Wind River System, Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
@@ -175,6 +176,7 @@ int remoteproc_init(char *fw_name, struc
 		/* Create proc instance */
 		status = hil_init_proc(proc);
 		if (!status) {
+            rproc->proc = proc;
 			/* Retrieve firmware attributes */
 			status =
 			    hil_get_firmware(fw_name, &fw_addr,
diff -uparN open-amp-2016.10/lib/rpmsg/Makefile openamp/lib/rpmsg/Makefile
--- open-amp-2016.10/lib/rpmsg/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/rpmsg/Makefile	2017-02-24 14:39:34.000000000 +0800
@@ -0,0 +1,50 @@
+# Makefile - makefile for OpenAMP rpmsg
+#
+# Copyright (c) 2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+# 10nov16,ghl  Create for OpenAMP on vxworks-7 (F8373).
+#
+# DESCRIPTION
+# This file contains the makefile rules for building OpenAMP library.
+#
+
+LIB_BASE_NAME = OPENAMP
+
+include $(WIND_KRNL_MK)/defs.library.mk
+
+OBJS_ARMARCH7M = rpmsg.o rpmsg_core.o remote_device.o
+OBJS_ARMARCH7  = rpmsg.o rpmsg_core.o remote_device.o
+DOC_FILES      = rpmsg.c rpmsg_core.c remote_device.c
+
+include $(wildcard $(sort *.mk))
+
+OBJS=$(OBJS_$(CPU))
+
+include $(WIND_KRNL_MK)/rules.library.mk
diff -uparN open-amp-2016.10/lib/virtio/Makefile openamp/lib/virtio/Makefile
--- open-amp-2016.10/lib/virtio/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ openamp/lib/virtio/Makefile	2017-02-24 14:39:34.000000000 +0800
@@ -0,0 +1,51 @@
+# Makefile - makefile for OpenAMP virtio
+#
+# Copyright (c) 2016 Wind River Systems, Inc. 
+# 
+# Redistribution and use in source and binary forms, with or without modification, are 
+# permitted provided that the following conditions are met: 
+# 
+# 1) Redistributions of source code must retain the above copyright notice, 
+# this list of conditions and the following disclaimer. 
+# 
+# 2) Redistributions in binary form must reproduce the above copyright notice, 
+# this list of conditions and the following disclaimer in the documentation and/or 
+# other materials provided with the distribution. 
+# 
+# 3) Neither the name of Wind River Systems nor the names of its contributors may be 
+# used to endorse or promote products derived from this software without specific 
+# prior written permission. 
+# 
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
+# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
+# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
+# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
+# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
+#
+# modification history
+# --------------------
+# 10nov16,ghl  Create for OpenAMP on vxworks-7 (F8373).
+#
+# DESCRIPTION
+# This file contains the makefile rules for building OpenAMP library.
+#
+
+LIB_BASE_NAME = OPENAMP
+
+include $(WIND_KRNL_MK)/defs.library.mk
+
+OBJS_ARMARCH7M = virtio.o virtqueue.o
+OBJS_ARMARCH7  = virtio.o virtqueue.o
+DOC_FILES      = virtio.c virtqueue.c
+
+
+include $(wildcard $(sort *.mk))
+
+OBJS=$(OBJS_$(CPU))
+
+include $(WIND_KRNL_MK)/rules.library.mk
